From 8640613b901959a2bc028e97880df7ecf7be81ef Mon Sep 17 00:00:00 2001
From: Andriy Stepanov <stanv@altlinux.ru>
Date: Wed, 24 Jul 2013 18:51:22 +0400
Subject: [PATCH] Add mark s0 flag for NetLabel subsystem.

---
 net/netlabel/netlabel_kapi.c |   61 ++++++++++++++++++++
 net/netlabel/netlabel_mgmt.c |  126 ++++++++++++++++++++++++++++++++++++++++++
 net/netlabel/netlabel_mgmt.h |    8 +++
 3 files changed, 195 insertions(+), 0 deletions(-)

diff --git a/net/netlabel/netlabel_kapi.c b/net/netlabel/netlabel_kapi.c
index 7c94aed..7e09968 100644
--- a/net/netlabel/netlabel_kapi.c
+++ b/net/netlabel/netlabel_kapi.c
@@ -662,6 +662,20 @@ int netlbl_sock_setattr(struct sock *sk,
 			ret_val = -EDESTADDRREQ;
 			break;
 		case NETLBL_NLTYPE_CIPSOV4:
+			/* Our target is skipping marking packets with s0.
+			 * If 'map' command doesn't have specified 'address' and 'domain'
+			 * than netlabel takes 'default' rule.
+			 * Default rule is to mark packets corresponding to socket IP option.
+			 * Socket has IP option. Linux's network subsystem automatically assigns
+			 * for any packets socket's IP option.
+			 */
+			if (!netlbl_mgmt_s0_flg()
+					&& secattr->flags & NETLBL_SECATTR_MLS_LVL
+					&& !(secattr->flags & NETLBL_SECATTR_MLS_CAT)
+					&& secattr->attr.mls.lvl == 0) {
+				ret_val = 0;
+				break;
+			}
 			ret_val = cipso_v4_sock_setattr(sk,
 						    dom_entry->type_def.cipsov4,
 						    secattr);
@@ -768,6 +782,23 @@ int netlbl_conn_setattr(struct sock *sk,
 		}
 		switch (af4_entry->type) {
 		case NETLBL_NLTYPE_CIPSOV4:
+			/* Our target is skipping marking packets with s0.
+			 * If 'map' command doesn't have specified 'address' and 'domain'
+			 * than netlabel takes 'default' rule.
+			 * Default rule is to mark packets corresponding to socket IP option.
+			 * Socket has IP option. Linux's network subsystem automatically assigns
+			 * for any packets socket's IP option.
+			 */
+			if (!netlbl_mgmt_s0_flg()
+					&& secattr->flags & NETLBL_SECATTR_MLS_LVL
+					&& !(secattr->flags & NETLBL_SECATTR_MLS_CAT)
+					&& secattr->attr.mls.lvl == 0) {
+				/* just delete the protocols we support for right now
+				 * but we could remove other protocols if needed */
+				cipso_v4_sock_delattr(sk);
+				ret_val = 0;
+				break;
+			}
 			ret_val = cipso_v4_sock_setattr(sk,
 						   af4_entry->type_def.cipsov4,
 						   secattr);
@@ -841,6 +872,23 @@ int netlbl_req_setattr(struct request_sock *req,
 		}
 		switch (proto_type) {
 		case NETLBL_NLTYPE_CIPSOV4:
+			/* Our target is skipping marking packets with s0.
+			 * If 'map' command doesn't have specified 'address' and 'domain'
+			 * than netlabel takes 'default' rule.
+			 * Default rule is to mark packets corresponding to socket IP option.
+			 * Socket has IP option. Linux's network subsystem automatically assigns
+			 * for any packets socket's IP option.
+			 */
+			if (!netlbl_mgmt_s0_flg()
+					&& secattr->flags & NETLBL_SECATTR_MLS_LVL
+					&& !(secattr->flags & NETLBL_SECATTR_MLS_CAT)
+					&& secattr->attr.mls.lvl == 0) {
+				/* just delete the protocols we support for right now
+				 * but we could remove other protocols if needed */
+				cipso_v4_req_delattr(req);
+				ret_val = 0;
+				break;
+			}
 			ret_val = cipso_v4_req_setattr(req,
						       entry->cipso, secattr);
 			break;
 		case NETLBL_NLTYPE_UNLABELED:
@@ -913,6 +961,19 @@ int netlbl_skbuff_setattr(struct sk_buff *skb,
 		}
 		switch (af4_entry->type) {
 		case NETLBL_NLTYPE_CIPSOV4:
+				/* Our target is skipping marking packets with s0.
+				 * We can't change fucntion netlbl_domhsh_getentry_af4,
+				 * due it is used in other places. Thus, let's place code
+				 * just right here. */
+				if (!netlbl_mgmt_s0_flg()
+						&& secattr->flags & NETLBL_SECATTR_MLS_LVL
+						&& !(secattr->flags & NETLBL_SECATTR_MLS_CAT)
+						&& secattr->attr.mls.lvl == 0) {
+					/* just delete the protocols we support for right now
+					 * but we could remove other protocols if needed */
+					ret_val = cipso_v4_skbuff_delattr(skb);
+					break;
+				}
 			ret_val = cipso_v4_skbuff_setattr(skb, entry->cipso,
							  secattr);
diff --git a/net/netlabel/netlabel_mgmt.c b/net/netlabel/netlabel_mgmt.c
index c5384ff..0a1fbc6 100644
--- a/net/netlabel/netlabel_mgmt.c
+++ b/net/netlabel/netlabel_mgmt.c
@@ -67,18 +67,58 @@ static struct genl_family netlbl_mgmt_gnl_family = {
 	.maxattr = NLBL_MGMT_A_MAX,
 };
 
+/* Accept unlabeled packets flag */
+static u8 netlabel_mgmt_s0_flg = 0;
+
 /* NetLabel Netlink attribute policy */
 static const struct nla_policy netlbl_mgmt_genl_policy[NLBL_MGMT_A_MAX + 1] = {
 	[NLBL_MGMT_A_DOMAIN] = { .type = NLA_NUL_STRING },
 	[NLBL_MGMT_A_PROTOCOL] = { .type = NLA_U32 },
 	[NLBL_MGMT_A_VERSION] = { .type = NLA_U32 },
 	[NLBL_MGMT_A_CV4DOI] = { .type = NLA_U32 },
+	[NLBL_MGMT_A_S0] = { .type = NLA_U8 },
 };
 
 /*
  * Helper Functions
  */
 
+
+/**
+ * netlbl_mgmt_s0_flg - Get the state of the s0 mark flag
+ */
+int netlbl_mgmt_s0_flg(void)
+{
+    return netlabel_mgmt_s0_flg;
+}
+
+/**
+ * netlbl_mgmt_s0_update  - Set the s0 mark flag
+ * @value: desired value
+ * @audit_info: NetLabel audit information
+ *
+ * Description:
+ * Set the value of the s0 mark flag to @value.
+ *
+ */
+static void netlbl_mgmt_s0_update(u8 value,
+					 struct netlbl_audit *audit_info)
+{
+	struct audit_buffer *audit_buf;
+	u8 old_val;
+
+	old_val = netlabel_mgmt_s0_flg;
+	netlabel_mgmt_s0_flg = value;
+	// XXX: change type
+	audit_buf = netlbl_audit_start_common(AUDIT_MAC_UNLBL_ALLOW,
+					      audit_info);
+	if (audit_buf != NULL) {
+		audit_log_format(audit_buf,
+				 " mark_s0=%u old=%u", value, old_val);
+		audit_log_end(audit_buf);
+	}
+}
+
 /**
  * netlbl_mgmt_add - Handle an ADD message
  * @info: the Generic NETLINK info block
@@ -375,6 +415,73 @@ static int netlbl_mgmt_listentry(struct sk_buff *skb,
  */
 
 /**
+ * netlbl_mgmt_s0_set - Handle an s0 mark message
+ * @skb: the NETLINK buffer
+ * @info: the Generic NETLINK info block
+ *
+ * Description:
+ * Process a user generated s0 mark message and set the accept flag accordingly.
+ * Returns zero on success, negative values on failure.
+ *
+ */
+static int netlbl_mgmt_s0_set(struct sk_buff *skb, struct genl_info *info)
+{
+	u8 value;
+	struct netlbl_audit audit_info;
+
+	if (info->attrs[NLBL_MGMT_A_S0]) {
+		value = nla_get_u8(info->attrs[NLBL_MGMT_A_S0]);
+		if (value == 1 || value == 0) {
+			netlbl_netlink_auditinfo(skb, &audit_info);
+			netlbl_mgmt_s0_update(value, &audit_info);
+			return 0;
+		}
+	}
+
+	return -EINVAL;
+}
+
+/**
+ * netlbl_mgmt_s0_get - Handle an s0 mark message
+ * @skb: the NETLINK buffer
+ * @info: the Generic NETLINK info block
+ *
+ * Description:
+ * Process a user generated s0 mark message and respond with the current status.
+ * Returns zero on success, negative values on failure.
+ *
+ */
+static int netlbl_mgmt_s0_get(struct sk_buff *skb, struct genl_info *info)
+{
+	int ret_val = -EINVAL;
+	struct sk_buff *ans_skb;
+	void *data;
+
+	ans_skb = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);
+	if (ans_skb == NULL)
+		goto list_failure;
+	data = genlmsg_put_reply(ans_skb, info, &netlbl_mgmt_gnl_family,
+				 0, NLBL_MGMT_C_S0_GET);
+	if (data == NULL) {
+		ret_val = -ENOMEM;
+		goto list_failure;
+	}
+
+	ret_val = nla_put_u8(ans_skb,
+			     NLBL_MGMT_A_S0,
+			     netlabel_mgmt_s0_flg);
+	if (ret_val != 0)
+		goto list_failure;
+
+	genlmsg_end(ans_skb, data);
+	return genlmsg_reply(ans_skb, info);
+
+list_failure:
+	kfree_skb(ans_skb);
+	return ret_val;
+}
+
+/**
  * netlbl_mgmt_add - Handle an ADD message
  * @skb: the NETLINK buffer
  * @info: the Generic NETLINK info block
@@ -764,6 +871,20 @@ static struct genl_ops netlbl_mgmt_genl_ops[] = {
 	.doit = netlbl_mgmt_version,
 	.dumpit = NULL,
 	},
+	{
+	.cmd = NLBL_MGMT_C_S0_GET,
+	.flags = 0,
+	.policy = netlbl_mgmt_genl_policy,
+	.doit = netlbl_mgmt_s0_get,
+	.dumpit = NULL,
+	},
+	{
+	.cmd = NLBL_MGMT_C_S0_SET,
+	.flags = GENL_ADMIN_PERM,
+	.policy = netlbl_mgmt_genl_policy,
+	.doit = netlbl_mgmt_s0_set,
+	.dumpit = NULL,
+	},
 };
 
 /*
@@ -780,6 +901,11 @@ static struct genl_ops netlbl_mgmt_genl_ops[] = {
  */
 int __init netlbl_mgmt_genl_init(void)
 {
+	struct netlbl_audit audit_info;
+
+	/* set default s0 mark flag */
+	netlbl_mgmt_s0_update(1, &audit_info);
+
 	return genl_register_family_with_ops(&netlbl_mgmt_gnl_family,
 		netlbl_mgmt_genl_ops, ARRAY_SIZE(netlbl_mgmt_genl_ops));
 }
diff --git a/net/netlabel/netlabel_mgmt.h b/net/netlabel/netlabel_mgmt.h
index 5a9f31c..f67373f 100644
--- a/net/netlabel/netlabel_mgmt.h
+++ b/net/netlabel/netlabel_mgmt.h
@@ -171,6 +171,8 @@ enum {
 	NLBL_MGMT_C_LISTDEF,
 	NLBL_MGMT_C_PROTOCOLS,
 	NLBL_MGMT_C_VERSION,
+	NLBL_MGMT_C_S0_SET,
+	NLBL_MGMT_C_S0_GET,
 	__NLBL_MGMT_C_MAX,
 };
 
@@ -210,6 +212,9 @@ enum {
 	/* (NLA_NESTED)
 	 * the selector list, there must be at least one
 	 * NLBL_MGMT_A_ADDRSELECTOR attribute */
+	NLBL_MGMT_A_S0,
+	/* (NLA_U8)
+	 * if true then S0 packets are not marked, else marked */
 	__NLBL_MGMT_A_MAX,
 };
 #define NLBL_MGMT_A_MAX (__NLBL_MGMT_A_MAX - 1)
@@ -220,4 +225,7 @@ int netlbl_mgmt_genl_init(void);
 /* NetLabel configured protocol reference counter */
 extern atomic_t netlabel_mgmt_protocount;
 
+/* Status of markup s0 packets flag. */
+int netlbl_mgmt_s0_flg(void);
+
 #endif
-- 
1.7.3.3

